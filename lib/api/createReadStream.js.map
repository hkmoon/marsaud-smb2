{"version":3,"sources":["src/createReadStream.js"],"names":["path","options","cb","err","file","code","SmbReadableStream","requestAsync","promisify","maxPacketSize","connection","start","end","encoding","offset","fileLength","i","EndofFile","length","Math","pow","wait","size","lt","rest","sub","neg","packetSize","min","toNumber","FileId","Length","Offset","toBuffer","content","toString","add","push","ge"],"mappings":"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","file":"createReadStream.js","sourcesContent":["import Bigint from '../tools/bigint'\nimport Bluebird from 'bluebird'\nimport {Readable} from 'stream'\nimport {request} from '../tools/smb2-forge'\n\nconst requestAsync = Bluebird.promisify(request)\n\nconst maxPacketSize = 0x00010000\n\nclass SmbReadableStream extends Readable {\n  constructor (connection, file, options = {}) {\n    super(options)\n\n    const {\n      start = 0,\n      end,\n      encoding\n    } = options\n\n    this.connection = connection\n    this.encoding = encoding\n    this.file = file\n    this.offset = new Bigint(8, start)\n\n    let fileLength = 0\n    for (let i = 0; i < file.EndofFile.length; i++) {\n      fileLength += file.EndofFile[i] * Math.pow(2, i * 8)\n    }\n    this.fileLength = fileLength\n    this.wait = false\n\n    if (end >= 0 && end < fileLength) {\n      this.fileLength = end + 1\n    }\n  }\n\n  async _read (size) {\n    while (this.offset.lt(this.fileLength)/* && size > 0 */) {\n      if (this.wait) {\n        return\n      }\n      const rest = this.offset.sub(this.fileLength).neg()\n      const packetSize = Math.min(maxPacketSize, rest.toNumber()/*, size */)\n\n      const offset = new Bigint(this.offset)\n      this.wait = true\n      let content = await requestAsync('read', {\n        FileId: this.file.FileId,\n        Length: packetSize,\n        Offset: offset.toBuffer()\n      }, this.connection)\n      this.wait = false\n\n      if (this.encoding) {\n        content = content.toString(this.encoding)\n      }\n      this.offset = this.offset.add(packetSize)\n      // size -= packetSize\n      if (!this.push(content)) {\n        return\n      }\n    }\n    if (this.offset.ge(this.fileLength)) {\n      this.push(null)\n      await requestAsync('close', this.file, this.connection)\n    }\n  }\n}\n\nexport default function (path, options, cb) {\n  if (typeof options === 'function') {\n    cb = options\n    options = {}\n  }\n  request('open', {path}, this, (err, file) => {\n    if (err) {\n      if (err.code === 'STATUS_OBJECT_NAME_NOT_FOUND') {\n        err.code = 'ENOENT'\n      }\n      cb(err)\n    } else {\n      cb(null, new SmbReadableStream(this, file, options))\n    }\n  })\n}\n"]}