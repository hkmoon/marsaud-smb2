{"version":3,"sources":["src/ensureDir.js"],"names":["requestAsync","promisify","ensureOneDir","path","connection","fileOrDir","FileAttributes","readIntBE","Error","code","cb","structure","split","base","length","push","shift","basePath","join"],"mappings":"8TAAA;AACA,kC;;AAEA,GAAMA,cAAe,mBAASC,SAAT,oBAArB;;AAEA,GAAMC,4FAAe,iBAAgBC,IAAhB,CAAsBC,UAAtB;;AAEOJ,aAAa,MAAb,CAAqB,CAACG,SAAD,CAArB,CAA6BC,UAA7B,CAFP,SAEXC,SAFW;AAGbA,UAAUC,cAAV,CAAyBC,SAAzB,CAAmC,CAAnC,CAAsC,CAAtC,IAA6C,UAHhC;AAITP,aAAa,OAAb,CAAsBK,SAAtB,CAAiCD,UAAjC,CAJS;;AAMT,GAAII,MAAJ,CAAaL,IAAb,kCANS;;;AASb,YAAIM,IAAJ,GAAa,8BATA;;AAWPT,aAAa,eAAb,CAA8B,CAACG,SAAD,CAA9B,CAAsCC,UAAtC,CAXO;;AAaT,YAAIK,IAAJ,GAAa,8BAbJ,mLAAf,+EAAN,C;;;;;;;;;;AAuBe,kBAAgBN,IAAhB,CAAsBO,EAAtB;AACPC,SADO,CACKR,KAAKS,KAAL,CAAW,IAAX,CADL;AAEPC,IAFO,CAEA,EAFA;;AAIJF,UAAUG,MAJN;AAKTD,KAAKE,IAAL,CAAUJ,UAAUK,KAAV,EAAV;AACMC,QANG,CAMQJ,KAAKK,IAAL,CAAU,IAAV,CANR;AAOJD,SAASH,MAPL;;;AAUHZ,aAAae,QAAb,CAAuB,IAAvB,CAVG;;AAYXP,GAAG,IAAH,EAZW;;AAcXA,iBAdW,uE","file":"ensureDir.js","sourcesContent":["import {request} from '../tools/smb2-forge'\nimport Bluebird from 'bluebird'\n\nconst requestAsync = Bluebird.promisify(request)\n\nconst ensureOneDir = async function (path, connection) {\n  try {\n    const fileOrDir = await requestAsync('open', {path}, connection)\n    if (fileOrDir.FileAttributes.readIntBE(0, 1) === 0x00000010) { // See http://download.microsoft.com/DOWNLOAD/9/5/E/95EF66AF-9026-4BB0-A41D-A4F81802D92C/[MS-FSCC].pdf Section 2.6\n      await requestAsync('close', fileOrDir, connection)\n    } else {\n      throw new Error(`${path} exists but is not a directory`)\n    }\n  } catch (err) {\n    if (err.code === 'STATUS_OBJECT_NAME_NOT_FOUND') {\n      try {\n        await requestAsync('create_folder', {path}, connection)\n      } catch (err) {\n        if (err.code !== 'STATUS_OBJECT_NAME_COLLISION') {\n          throw err\n        }\n      }\n    } else {\n      throw err\n    }\n  }\n}\n\nexport default async function (path, cb) {\n  const structure = path.split('\\\\')\n  const base = []\n  try {\n    while (structure.length) {\n      base.push(structure.shift())\n      const basePath = base.join('\\\\')\n      if (!basePath.length) {\n        continue\n      }\n      await ensureOneDir(basePath, this)\n    }\n    cb(null)\n  } catch (error) {\n    cb(error)\n  }\n}\n"]}